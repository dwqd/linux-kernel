#!/bin/bash

export ARCH=arm
export CROSS_COMPILE=arm-none-linux-gnueabihf-
export zImage_obj=$SRC_DIR/linux-5.6.11/arch/arm/boot/zImage
export dtb_obj=$SRC_DIR/linux-5.6.11/arch/arm/boot/dts/vexpress-v2p-ca9.dtb
export rootfs_obj=$IMAGE_DIR/rootfs.ext3

function arm_usage(){
    echo ""
	echo "usage for arm:"
	echo "  ./smake -arm zImage                -- cross-complie linux kernel zImage "
	echo "  ./smake -arm uImage                -- cross-complie linux kernel uImage "
	echo "  ./smake -arm uboot                 -- cross-complie uboot"
	echo "  ./smake -arm busybox               -- cross-complie busybox"
	echo "  ./smake -arm rootfs                -- create rootfs ext3 image"
	echo "  ./smake -arm clean_rootfs          -- clean rootfs dir"
	echo "  ./smake -arm run_uboot             -- run uboot in qemu without graphic"
	echo "  ./smake -arm run_zImage            -- run zImage in qemu with graphic"
	echo "  ./smake -arm debug_uboot           -- debug uboot use gdb in qemu without graphic"
	echo "  ./smake -arm debug_zImage          -- debug zImage use gdb in qemu with graphic"
	echo "  ./smake -arm clean_boot            -- clean uboot,reserve config"
	echo "  ./smake -arm clean_kernel          -- clean kernel,reserve config"
	echo "  ./smake -arm disclean_boot         -- deep clean uboot"
	echo "  ./smake -arm distclean_kernel      -- distclean kernel"
	echo "  ./smake -arm clean_busybox         -- clean busybox"
	echo "  ./smake -arm distclean_busybox     -- distclean busybox"
	echo "  ./smake -arm setup_net             -- setup net connection with qemu"
	echo "  ./smake -arm modules xxx           -- make kernel modules in src/modules/xxx,xxx indicates modules directory"
	echo "  ./smake -arm modules clean xxx     -- clean kernel modules in src/modules/xxx,xxx indicates modules directory"
    echo ""
}

function make_arm_zImage(){
    cd $SRC_DIR/linux-5.6.11
    make vexpress_defconfig  #使用内核中的默认vexpress架构的配置( 根据硬件平台生成临时配置文件.config)
	make -j12 zImage         # 编译zImage文件
	make dtbs                #编译设备树（ 可以看看arch/arm/boot/dts/Makefile中你要的那个设备树的dtb文件是否配置上了）
    make modules             #编译内核外模块（ 所有编译内核的时候只编译一部分通用常用的驱动(编译需要的模块)）
    echo "generate zImage dts succeed"

}

function make_arm_uImage(){
   export LOADADDR=0x60003000
i   cd $SRC_DIR/linux-5.6.11
   make vexpress_defconfig
   make -j12 uImage
   make dtbs
   make modules
   echo "generate uImage succeed"
}

function make_arm_boot(){
   cd $SRC_DIR/u-boot-2020.04
   make vexpress_ca9x4_defconfig
   make -j12
   echo "generate uboot succeed"
}

function make_arm_busybox(){
   cd $SRC_DIR/busybox-1.31.1
   make menuconfig
   make -j12
   make install
   echo "generate busybox succeed"

}

function run_arm_boot(){
   cd $SRC_DIR/u-boot-2020.04
   qemu-system-arm -M vexpress-a9 \
       -m 256M -nographic -kernel u-boot \
       -net nic -net tap,ifname=tap0,script=no,downscript=no 
       #-sd $rootfs_obj
}

function debug_arm_boot(){
   cd $SRC_DIR/u-boot-2020.04
   qemu-system-arm -S -s -M vexpress-a9 \
       -m 256M -nographic -kernel u-boot \
       -net nic -net tap,ifname=tap0,script=no,downscript=no 
       #-sd $rootfs_obj
}
function run_arm_zImage(){
   sudo qemu-system-arm -M vexpress-a9 -m 512M -dtb $dtb_obj -kernel $zImage_obj -smp 4\
  	 -append "root=/dev/mmcblk0 rw rootwait earlyprintk console=tty0 init=/linuxrc" -sd $rootfs_obj\
       -net nic -net tap,ifname=tap0,script=no,downscript=no
}

function debug_arm_zImage(){
   sudo qemu-system-arm -S -s -M vexpress-a9 -m 512M -dtb $dtb_obj -kernel $zImage_obj -smp 4\
  	 -append "root=/dev/mmcblk0 rw rootwait earlyprintk console=tty0 init=/linuxrc" -sd $rootfs_obj\
       -net nic -net tap,ifname=tap0,script=no,downscript=no
}
